{
  
    
        "post0": {
            "title": "코인 미래예측기",
            "content": "&#47784;&#46280;&#49444;&#52824; . pip install binance-connector . Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Requirement already satisfied: binance-connector in /usr/local/lib/python3.7/dist-packages (1.13.0) Requirement already satisfied: Twisted&gt;=21.2.0 in /usr/local/lib/python3.7/dist-packages (from binance-connector) (22.4.0) Requirement already satisfied: autobahn&gt;=21.2.1 in /usr/local/lib/python3.7/dist-packages (from binance-connector) (22.5.1) Requirement already satisfied: requests&gt;=2.25.1 in /usr/local/lib/python3.7/dist-packages (from binance-connector) (2.27.1) Requirement already satisfied: pyOpenSSL&gt;=19.0.0 in /usr/local/lib/python3.7/dist-packages (from binance-connector) (22.0.0) Requirement already satisfied: service-identity&gt;=21.1.0 in /usr/local/lib/python3.7/dist-packages (from binance-connector) (21.1.0) Requirement already satisfied: cryptography&gt;=3.4.6 in /usr/local/lib/python3.7/dist-packages (from autobahn&gt;=21.2.1-&gt;binance-connector) (37.0.2) Requirement already satisfied: txaio&gt;=21.2.1 in /usr/local/lib/python3.7/dist-packages (from autobahn&gt;=21.2.1-&gt;binance-connector) (22.2.1) Requirement already satisfied: hyperlink&gt;=21.0.0 in /usr/local/lib/python3.7/dist-packages (from autobahn&gt;=21.2.1-&gt;binance-connector) (21.0.0) Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from autobahn&gt;=21.2.1-&gt;binance-connector) (57.4.0) Requirement already satisfied: cffi&gt;=1.12 in /usr/local/lib/python3.7/dist-packages (from cryptography&gt;=3.4.6-&gt;autobahn&gt;=21.2.1-&gt;binance-connector) (1.15.0) Requirement already satisfied: pycparser in /usr/local/lib/python3.7/dist-packages (from cffi&gt;=1.12-&gt;cryptography&gt;=3.4.6-&gt;autobahn&gt;=21.2.1-&gt;binance-connector) (2.21) Requirement already satisfied: idna&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from hyperlink&gt;=21.0.0-&gt;autobahn&gt;=21.2.1-&gt;binance-connector) (2.10) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.25.1-&gt;binance-connector) (2022.5.18.1) Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.25.1-&gt;binance-connector) (1.24.3) Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.25.1-&gt;binance-connector) (2.0.12) Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from service-identity&gt;=21.1.0-&gt;binance-connector) (1.15.0) Requirement already satisfied: pyasn1 in /usr/local/lib/python3.7/dist-packages (from service-identity&gt;=21.1.0-&gt;binance-connector) (0.4.8) Requirement already satisfied: pyasn1-modules in /usr/local/lib/python3.7/dist-packages (from service-identity&gt;=21.1.0-&gt;binance-connector) (0.2.8) Requirement already satisfied: attrs&gt;=19.1.0 in /usr/local/lib/python3.7/dist-packages (from service-identity&gt;=21.1.0-&gt;binance-connector) (21.4.0) Requirement already satisfied: constantly&gt;=15.1 in /usr/local/lib/python3.7/dist-packages (from Twisted&gt;=21.2.0-&gt;binance-connector) (15.1.0) Requirement already satisfied: zope.interface&gt;=4.4.2 in /usr/local/lib/python3.7/dist-packages (from Twisted&gt;=21.2.0-&gt;binance-connector) (5.4.0) Requirement already satisfied: Automat&gt;=0.8.0 in /usr/local/lib/python3.7/dist-packages (from Twisted&gt;=21.2.0-&gt;binance-connector) (20.2.0) Requirement already satisfied: incremental&gt;=21.3.0 in /usr/local/lib/python3.7/dist-packages (from Twisted&gt;=21.2.0-&gt;binance-connector) (21.3.0) Requirement already satisfied: typing-extensions&gt;=3.6.5 in /usr/local/lib/python3.7/dist-packages (from Twisted&gt;=21.2.0-&gt;binance-connector) (4.2.0) . pip install --upgrade mplfinance . Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Requirement already satisfied: mplfinance in /usr/local/lib/python3.7/dist-packages (0.12.9b1) Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from mplfinance) (1.3.5) Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mplfinance) (3.2.2) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;mplfinance) (0.11.0) Requirement already satisfied: numpy&gt;=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;mplfinance) (1.21.6) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;mplfinance) (1.4.2) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;mplfinance) (3.0.9) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;mplfinance) (2.8.2) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver&gt;=1.0.1-&gt;matplotlib-&gt;mplfinance) (4.2.0) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.1-&gt;matplotlib-&gt;mplfinance) (1.15.0) Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;mplfinance) (2022.1) . &#49892;&#54665;1 . import warnings warnings.filterwarnings(action=&#39;ignore&#39;) . from binance.spot import Spot import datetime import pandas as pd client = Spot() print(client.time()) client = Spot(key=&#39;EwMt3ZUUK2RzbfZzdTTrT2W6yAtJJnl8LZfUQBGEzZQJfDd3rmlYwwokmeFNRRXK&#39;, secret=&#39;I06Ygmvt4hYtefi3OyoCnF0CmrsbPcw12deF0hTU9rNQ4SrVh2t5a2RGD94m7mUS&#39;) . {&#39;serverTime&#39;: 1654581702559} . data = client.klines(symbol=&#39;BTCUSDT&#39;, interval=&#39;1h&#39;, limit=10000) # 문자열을 float 타입으로 변환 for i in range(len(data)): for j in range(len(data[i])): if isinstance(data[i][j], str): data[i][j] = float(data[i][j]) . # pandas DataFrame 객체 생성 df = pd.DataFrame(data, columns= [ &#39;datetime&#39;, &#39;open&#39;, &#39;high&#39;, &#39;low&#39;, &#39;close&#39;, &#39;volume&#39;, &#39;closeTime&#39;, &#39;QuoteAssetVolume&#39;, &#39;NumTrades&#39;, &#39;TakerBuyBaseAssetVolume&#39;, &#39;TakerBuyQuoteAssetVolume&#39; , &#39;Ignore&#39; ] ) df[&#39;datetime&#39;] = pd.to_datetime(df[&#39;datetime&#39;], unit=&#39;ms&#39;) # df.set_index(&#39;datetime&#39;, inplace=True) df . datetime open high low close volume closeTime QuoteAssetVolume NumTrades TakerBuyBaseAssetVolume TakerBuyQuoteAssetVolume Ignore . 0 2022-04-26 15:00:00 | 39274.40 | 39361.21 | 38550.00 | 38563.94 | 6041.66790 | 1650988799999 | 2.358071e+08 | 110217 | 2846.67927 | 1.111178e+08 | 0.0 | . 1 2022-04-26 16:00:00 | 38563.94 | 38886.51 | 38342.11 | 38667.14 | 6587.82295 | 1650992399999 | 2.544191e+08 | 123404 | 3221.62262 | 1.244318e+08 | 0.0 | . 2 2022-04-26 17:00:00 | 38667.14 | 38676.77 | 38000.18 | 38399.09 | 5627.56135 | 1650995999999 | 2.154935e+08 | 114789 | 2583.78225 | 9.896242e+07 | 0.0 | . 3 2022-04-26 18:00:00 | 38399.09 | 38473.96 | 38214.86 | 38408.86 | 2573.00415 | 1650999599999 | 9.867934e+07 | 57994 | 1203.27316 | 4.614475e+07 | 0.0 | . 4 2022-04-26 19:00:00 | 38408.86 | 38577.77 | 37842.49 | 38270.03 | 5384.53831 | 1651003199999 | 2.057072e+08 | 103461 | 2435.03635 | 9.308384e+07 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 995 2022-06-07 02:00:00 | 29568.47 | 29568.48 | 29218.96 | 29402.08 | 6359.73876 | 1654570799999 | 1.868095e+08 | 95378 | 3112.01809 | 9.141914e+07 | 0.0 | . 996 2022-06-07 03:00:00 | 29402.09 | 29668.10 | 29340.00 | 29563.62 | 6120.68755 | 1654574399999 | 1.809041e+08 | 75923 | 2075.69792 | 6.130338e+07 | 0.0 | . 997 2022-06-07 04:00:00 | 29563.61 | 29608.00 | 29455.40 | 29522.42 | 3289.71517 | 1654577999999 | 9.712072e+07 | 45491 | 1576.58852 | 4.654062e+07 | 0.0 | . 998 2022-06-07 05:00:00 | 29522.42 | 29632.49 | 29401.00 | 29478.41 | 3878.02366 | 1654581599999 | 1.144147e+08 | 52207 | 1271.97202 | 3.752826e+07 | 0.0 | . 999 2022-06-07 06:00:00 | 29478.40 | 29511.03 | 29472.14 | 29506.32 | 60.52457 | 1654585199999 | 1.784890e+06 | 1137 | 36.94809 | 1.089604e+06 | 0.0 | . 1000 rows × 12 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; # Timestamp를 Datetime(날짜-시간)형태로 변환 # df[&#39;datetime&#39;] = pd.to_datetime(df[&#39;datetime&#39;], unit=&#39;ms&#39;) # df.set_index(&#39;datetime&#39;, inplace=True) # 필요한 차트 데이터만 가져오기 df = df.reset_index() df[&#39;ds&#39;] = df[&#39;datetime&#39;] df[&#39;y&#39;] = df[&#39;close&#39;] data = df[[&#39;ds&#39;,&#39;y&#39;]] data . ds y . 0 2022-04-26 15:00:00 | 38563.94 | . 1 2022-04-26 16:00:00 | 38667.14 | . 2 2022-04-26 17:00:00 | 38399.09 | . 3 2022-04-26 18:00:00 | 38408.86 | . 4 2022-04-26 19:00:00 | 38270.03 | . ... ... | ... | . 995 2022-06-07 02:00:00 | 29402.08 | . 996 2022-06-07 03:00:00 | 29563.62 | . 997 2022-06-07 04:00:00 | 29522.42 | . 998 2022-06-07 05:00:00 | 29478.41 | . 999 2022-06-07 06:00:00 | 29506.32 | . 1000 rows × 2 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; . # df . data.dtypes . ds datetime64[ns] y float64 dtype: object . data . ds y . 0 2022-04-26 15:00:00 | 38563.94 | . 1 2022-04-26 16:00:00 | 38667.14 | . 2 2022-04-26 17:00:00 | 38399.09 | . 3 2022-04-26 18:00:00 | 38408.86 | . 4 2022-04-26 19:00:00 | 38270.03 | . ... ... | ... | . 995 2022-06-07 02:00:00 | 29402.08 | . 996 2022-06-07 03:00:00 | 29563.62 | . 997 2022-06-07 04:00:00 | 29522.42 | . 998 2022-06-07 05:00:00 | 29478.41 | . 999 2022-06-07 06:00:00 | 29506.32 | . 1000 rows × 2 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; data[&#39;ds&#39;] = pd.DatetimeIndex(data[&#39;ds&#39;]) data[&#39;y&#39;] = data[&#39;y&#39;].astype(&#39;float64&#39;) . from fbprophet import Prophet . m = Prophet() m.fit(data) . INFO:fbprophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this. . &lt;fbprophet.forecaster.Prophet at 0x7ff526adb210&gt; . 예측날짜 = m.make_future_dataframe(periods=120, freq=&#39;H&#39;) 예측값 = m.predict(예측날짜) 예측값.tail() . ds trend yhat_lower yhat_upper trend_lower trend_upper additive_terms additive_terms_lower additive_terms_upper daily daily_lower daily_upper weekly weekly_lower weekly_upper multiplicative_terms multiplicative_terms_lower multiplicative_terms_upper yhat . 1115 2022-06-12 02:00:00 | 30578.465719 | 27716.338999 | 32085.213420 | 28504.698441 | 32489.981858 | -520.385794 | -520.385794 | -520.385794 | -26.121478 | -26.121478 | -26.121478 | -494.264317 | -494.264317 | -494.264317 | 0.0 | 0.0 | 0.0 | 30058.079925 | . 1116 2022-06-12 03:00:00 | 30579.518445 | 27830.026359 | 32063.979161 | 28483.757706 | 32536.654595 | -482.567076 | -482.567076 | -482.567076 | -16.569447 | -16.569447 | -16.569447 | -465.997630 | -465.997630 | -465.997630 | 0.0 | 0.0 | 0.0 | 30096.951369 | . 1117 2022-06-12 04:00:00 | 30580.571171 | 27736.668923 | 32239.669367 | 28455.323944 | 32560.233153 | -447.558484 | -447.558484 | -447.558484 | -11.469816 | -11.469816 | -11.469816 | -436.088668 | -436.088668 | -436.088668 | 0.0 | 0.0 | 0.0 | 30133.012687 | . 1118 2022-06-12 05:00:00 | 30581.623897 | 27916.068728 | 32222.212125 | 28417.290704 | 32585.434337 | -408.372941 | -408.372941 | -408.372941 | -3.625012 | -3.625012 | -3.625012 | -404.747929 | -404.747929 | -404.747929 | 0.0 | 0.0 | 0.0 | 30173.250957 | . 1119 2022-06-12 06:00:00 | 30582.676624 | 27812.863717 | 32265.731518 | 28382.860256 | 32608.571997 | -353.448702 | -353.448702 | -353.448702 | 18.747880 | 18.747880 | 18.747880 | -372.196583 | -372.196583 | -372.196583 | 0.0 | 0.0 | 0.0 | 30229.227921 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; plot1 = m.plot(예측값) . m = Prophet( interval_width = 0.95, seasonality_mode= &#39;multiplicative&#39;, yearly_seasonality= True, changepoint_prior_scale=0.3 ) m.fit(data) . &lt;fbprophet.forecaster.Prophet at 0x7ff513963bd0&gt; . 예측날짜 = m.make_future_dataframe(periods=120, freq=&#39;H&#39;) 예측값 = m.predict(예측날짜) 예측값 . ds trend yhat_lower yhat_upper trend_lower trend_upper daily daily_lower daily_upper multiplicative_terms ... weekly weekly_lower weekly_upper yearly yearly_lower yearly_upper additive_terms additive_terms_lower additive_terms_upper yhat . 0 2022-04-26 15:00:00 | 10517.637175 | 37516.332630 | 39290.771282 | 10517.637175 | 10517.637175 | 0.000374 | 0.000374 | 0.000374 | 2.654937 | ... | 0.191242 | 0.191242 | 0.191242 | 2.463322 | 2.463322 | 2.463322 | 0.0 | 0.0 | 0.0 | 38441.302835 | . 1 2022-04-26 16:00:00 | 10505.335012 | 37621.620699 | 39334.419020 | 10505.335012 | 10505.335012 | -0.004754 | -0.004754 | -0.004754 | 2.656201 | ... | 0.180317 | 0.180317 | 0.180317 | 2.480638 | 2.480638 | 2.480638 | 0.0 | 0.0 | 0.0 | 38409.621200 | . 2 2022-04-26 17:00:00 | 10493.032848 | 37539.820869 | 39257.465926 | 10493.032848 | 10493.032848 | -0.011424 | -0.011424 | -0.011424 | 2.655575 | ... | 0.169062 | 0.169062 | 0.169062 | 2.497938 | 2.497938 | 2.497938 | 0.0 | 0.0 | 0.0 | 38358.069254 | . 3 2022-04-26 18:00:00 | 10480.730685 | 37418.186806 | 39224.697410 | 10480.730685 | 10480.730685 | -0.016248 | -0.016248 | -0.016248 | 2.656493 | ... | 0.157521 | 0.157521 | 0.157521 | 2.515220 | 2.515220 | 2.515220 | 0.0 | 0.0 | 0.0 | 38322.720806 | . 4 2022-04-26 19:00:00 | 10468.428522 | 37439.210392 | 39219.695723 | 10468.428522 | 10468.428522 | -0.016565 | -0.016565 | -0.016565 | 2.661659 | ... | 0.145739 | 0.145739 | 0.145739 | 2.532485 | 2.532485 | 2.532485 | 0.0 | 0.0 | 0.0 | 38331.817664 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1115 2022-06-12 02:00:00 | 12258.094360 | 7360.954378 | 15625.447091 | 7388.788311 | 15955.853306 | -0.004849 | -0.004849 | -0.004849 | -0.013150 | ... | -0.083420 | -0.083420 | -0.083420 | 0.075119 | 0.075119 | 0.075119 | 0.0 | 0.0 | 0.0 | 12096.898419 | . 1116 2022-06-12 03:00:00 | 12278.932450 | 7359.655966 | 15514.166420 | 7361.551264 | 16016.294138 | -0.002251 | -0.002251 | -0.002251 | -0.015641 | ... | -0.073717 | -0.073717 | -0.073717 | 0.060327 | 0.060327 | 0.060327 | 0.0 | 0.0 | 0.0 | 12086.873173 | . 1117 2022-06-12 04:00:00 | 12299.770541 | 7276.865088 | 15722.247316 | 7335.287675 | 16076.734971 | 0.000007 | 0.000007 | 0.000007 | -0.018171 | ... | -0.063721 | -0.063721 | -0.063721 | 0.045543 | 0.045543 | 0.045543 | 0.0 | 0.0 | 0.0 | 12076.266385 | . 1118 2022-06-12 05:00:00 | 12320.608631 | 7101.229908 | 15856.732651 | 7254.694449 | 16127.287689 | 0.002364 | 0.002364 | 0.002364 | -0.020324 | ... | -0.053455 | -0.053455 | -0.053455 | 0.030767 | 0.030767 | 0.030767 | 0.0 | 0.0 | 0.0 | 12070.204435 | . 1119 2022-06-12 06:00:00 | 12341.446721 | 6916.440637 | 15781.800954 | 7166.058047 | 16176.239182 | 0.006177 | 0.006177 | 0.006177 | -0.020763 | ... | -0.042939 | -0.042939 | -0.042939 | 0.015999 | 0.015999 | 0.015999 | 0.0 | 0.0 | 0.0 | 12085.199692 | . 1120 rows × 22 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; plot1 = m.plot(예측값) . &#53076;&#46377; &#48155;&#50500;&#50728; &#52636;&#52376; . https://www.youtube.com/watch?v=NgIVYrZW2lg https://velog.io/@lazydok/1.-%EB%B0%94%EC%9D%B4%EB%82%B8%EC%8A%A4-%EC%B0%A8%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0 . &#51473;&#44036;&#50640; &#47561;&#55176;&#45716;&#44144; &#46020;&#50880; &#48155;&#51008; &#44275; . *https://www.youtube.com/watch?v=Teju_e9TI3s .",
            "url": "https://yanggwangseok.github.io/everyday-coding/jupyter/%EA%B0%80%EC%A0%B8%EC%98%A8%20%EA%B2%83/2022/06/07/%EC%BD%94%EC%9D%B8_%EB%AF%B8%EB%9E%98%EC%98%88%EC%B8%A1%EA%B8%B0.html",
            "relUrl": "/jupyter/%EA%B0%80%EC%A0%B8%EC%98%A8%20%EA%B2%83/2022/06/07/%EC%BD%94%EC%9D%B8_%EB%AF%B8%EB%9E%98%EC%98%88%EC%B8%A1%EA%B8%B0.html",
            "date": " • Jun 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yanggwangseok.github.io/everyday-coding/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yanggwangseok.github.io/everyday-coding/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yanggwangseok.github.io/everyday-coding/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yanggwangseok.github.io/everyday-coding/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}